--------------------------------------------------------------------------------------------------------
어떤 수를 소수의 곱으로만 나타내는 것을 소인수분해라 하고, 이 소수들을 그 수의 소인수라고 합니다.
예를 들면 13195의 소인수는 5, 7, 13, 29 입니다.

600851475143의 소인수 중에서 가장 큰 수를 구하세요.
--------------------------------------------------------------------------------------------------------


c=600851475143   #상수
prime=[2]   #소수 리스트
ma=0    #최대값


##############################################
def is_prime_number(n):
    for i in range(3,(n+1)//2,1): 
        if n % i == 0: 
            return False 
	
    return True

###############################################
for i in range(3,int((c+1)**(1/2)),2):
    if is_prime_number(i)== True:
        prime.append(i)
        print(i)
##############################################
print("end")


for i in range(0,len(prime),1):
    if c%prime[i]==0 and prime[i]>ma:
        ma = prime[i]
        print(ma)
print('end')
print(ma)
################################################

출력결과
end
71
839
1471
6857
end
6857


파이썬에서 상수선언하는 코드를 모르겠음;
(const어디감;;;;;;)

소수라서 뭔가 규칙성 찾기가 어려운 것 같아서 일일이 찾음
(소수 찾을때 그 수 까지 다 찾는게 아니라 루트까지 찾으면 연산량을 줄일 수 있다.)
(for 돌릴때 숫자 하나씩 증가시키지말고 어짜피 짝수는 안되니까 2씩증가시키면 연산량 줄일 수 있다.)
(append하는 부분이 뒤에서 집어넣는걸로 기억하는데 append말고 다른거쓰면 좋은듯 비효율적인것같음)

소인수분해도 그 수의 절반까지만 해보면된다.

소수찾는데 왠종일 걸림ㅋㅋㅋㅋ
c로했으면 숫자가 좀 많이커서 메모리관련해서 애좀 먹었을것같긴한데 속도는 훨씬 빨랐을듯
(double도 넘어가면 그냥 직접할당으로 메모리잡고 풀었어야됬을거같음)
(파이썬이라 메모리 자동할당이라 그냥 되네;;)



-------------------------------------------------------------------------
소인수분해(prime factorization)
합성수를 소수의 곱으로 나타내는 방법을 말한다. 산술의 기본 정리에 의해 모든 양의 정수는 소수의 곱으로 표현하는 방법이 (곱의 순서를 바꾸는 것을 제외하면) 유일하게 존재한다. 그러나 산술의 기본정리는 그 소인수분해를 하는 방법을 알려주지는 않는다. 단지 존재성을 확인해 줄 뿐이다.

소인수분해 알고리즘
현대의 전자기 기반 컴퓨터상에서 소인수분해에 대한 다항식 시간 알고리즘은 알려져 있지 않다. 단, 이론적인 양자컴퓨터에서의 다항식 시간 소인수분해 알고리즘 (쇼어의 알고리즘)은 존재한다. 하지만 아직까지 어떤 합성수를 다항 시간 안에 소인수분해하기는 어려운 문제이며, 예를 들어 193자리 수(RSA-640)는 5개월간 30개의 2.2 GHz 옵테론 CPU를 동원하여 소인수분해 되었다. 소인수분해의 난해함은 RSA와 같은 현대 암호의 핵심적 부분이 된다.

위키백과, 소인수분해
-------------------------------------------------------------------------

